import chalk from "chalk";
import { bf, printMemory, type BfState, type BfIterator } from ".";
import blessed from "blessed";

const prog = `>++++++++[-<+++++++++>]<.>>+>-[+]++
  >++>+++[>[->+++<<+++>]<<]>-----.>->
  +++..+++.>-.<<+[>[+>+]>>]<---------
  -----.>>.+++.------.--------.>+.>+.
      `;

// 99 Beers?
// const prog = `>++++++++++[<++++++++++>-]<->>>>>+++[>+++>+++<<-]<<<<+<[>[>+
// >+<<-]>>[-<<+>>]++++>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<[[-]>>
// >>>>[[-]<++++++++++<->>]<-[>+>+<<-]>[<+>-]+>[[-]<->]<<<<<<<<
// <->>]<[>+>+<<-]>>[-<<+>>]+>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<
// <[>>+>+<<<-]>>>[-<<<+>>>]++>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<
// <[>+<[-]]<[>>+<<[-]]>>[<<+>>[-]]<<<[>>+>+<<<-]>>>[-<<<+>>>]+
// +++>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<[>+<[-]]<[>>+<<[-]]>>[<
// <+>>[-]]<<[[-]>>>++++++++[>>++++++<<-]>[<++++++++[>++++++<-]
// >.<++++++++[>------<-]>[<<+>>-]]>.<<++++++++[>>------<<-]<[-
// >>+<<]<++++++++[<++++>-]<.>+++++++[>+++++++++<-]>+++.<+++++[
// >+++++++++<-]>.+++++..--------.-------.++++++++++++++>>[>>>+
// >+<<<<-]>>>>[-<<<<+>>>>]>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<<<
// [>>>+>+<<<<-]>>>>[-<<<<+>>>>]+>+<[-<->]<[[-]>>-<<]>>[[-]<<+>
// >]<<<[>>+<<[-]]>[>+<[-]]++>>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<
// +<[[-]>-<]>[<<<<<<<.>>>>>>>[-]]<<<<<<<<<.>>----.---------.<<
// .>>----.+++..+++++++++++++.[-]<<[-]]<[>+>+<<-]>>[-<<+>>]+>+<
// [-<->]<[[-]>>-<<]>>[[-]<<+>>]<<<[>>+>+<<<-]>>>[-<<<+>>>]++++
// >+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<[>+<[-]]<[>>+<<[-]]>>[<<+>
// >[-]]<<[[-]>++++++++[<++++>-]<.>++++++++++[>+++++++++++<-]>+
// .-.<<.>>++++++.------------.---.<<.>++++++[>+++<-]>.<++++++[
// >----<-]>++.+++++++++++..[-]<<[-]++++++++++.[-]]<[>+>+<<-]>>
// [-<<+>>]+++>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<[[-]++++++++++.
// >+++++++++[>+++++++++<-]>+++.+++++++++++++.++++++++++.------
// .<++++++++[>>++++<<-]>>.<++++++++++.-.---------.>.<-.+++++++
// ++++.++++++++.---------.>.<-------------.+++++++++++++.-----
// -----.>.<++++++++++++.---------------.<+++[>++++++<-]>..>.<-
// ---------.+++++++++++.>.<<+++[>------<-]>-.+++++++++++++++++
// .---.++++++.-------.----------.[-]>[-]<<<.[-]]<[>+>+<<-]>>[-
// <<+>>]++++>+<[-<->]<[[-]>>-<<]>>[[-]<<+>>]<<[[-]++++++++++.[
// -]<[-]>]<+<]`;

const screen = blessed.screen({ smartCSR: true, useBCE: true });
const memoryBox = blessed.textbox({
  scrollable: true,
  alwaysScroll: true,
  top: "0",
  left: "0",
  width: "50%",
  height: "80%",
  content: printMemory(new Uint8Array(9999), 0),
  border: { type: "line" },
});

const programBox = blessed.box({
  top: "0",
  right: "0",
  width: "50%",
  height: "80%",
  content: prog,
  border: { type: "line" },
});

const inputBox = blessed.input({
  bottom: "0",
  left: "0",
  width: "50%",
  height: "20%",
  content: "",
  border: { type: "line" },
});

const outputBox = blessed.textbox({
  bottom: "0",
  right: "0",
  width: "50%",
  height: "20%",
  content: "",
  border: { type: "line" },
});

inputBox.focus();
screen.append(memoryBox);
screen.append(programBox);
screen.append(inputBox);
screen.append(outputBox);
screen.render();

screen.key(["escape", "q", "C-c"], function (ch, key) {
  return process.exit(0);
});

const { next } = bf({
  prog,
  input: [""],
  iterate: true,
});

let prevMem: Uint8Array;
let result: BfIterator;

setInterval(async () => {
  result = next();
  const {
    value: { memory, ap, pc, output, program },
  } = result;

  if (!Bun.deepEquals(memory, prevMem)) {
    memoryBox.content = printMemory(memory, ap);
  }

  programBox.content = program
    .map((f, idx) => (idx === pc ? chalk.bgMagenta(f) : f))
    .join("");
  outputBox.content = output;
  screen.render();
}, 20);
